/* FUNCIONES O FUNCTION: ES UN BLOQUE PL/SQL QUE RECIBE PARAMETROS DE ENTRADA(OPCIONALES) Y QUE EJECUTA UNA SERIE DE INSTRUCCIONES
Y DEVULEVE UN VALOR CON LA CLAUSULA RETURN
SE USAN MUCHO CUNADO QUIERES REUTILIZAR CÓDIGO QUE SIEMPRE RETORNA UN RESULTADO (A DIFERENCIA DEL PROCEDIMEINTO ALMACENADO, QUE NO NECESARIAMENTE RETORNA UN VALOR)
*/

-- FUNCION QUE SUMA 2 NUMEROS
CREATE OR REPLACE FUNCTION SUMA(a NUMBER, b NUMBER)
RETURN NUMBER IS
    RESULTADO NUMBER; -- DECLARACIÓN DE VARIABLES
BEGIN
    -- LÓGICA DE LA FUNCIÓN
    RESULTADO := a + b;
    RETURN RESULTADO; -- OBLIGATORIA
END;
/ -- INDICADOR

-- LLAMAR A LA FUNCIÓN
SELECT SUMA(5, 5) FROM DUAL;
-- INVOCACION MEDINTE UN BLOQUE ANÓNIMO
BEGIN
    DBMS_OUTPUT.PUT_LINE('EL RESULTADO DE LA SUMA ES: ' || SUMA(2,6));
END;
/ -- INDICADOR

/* EJERCICIOS:
1.- CREAR UNA FUNCION QUE CALCULE EL ÁREA DE UN TRIANGULO
2.- CREAR UNA FUNCIÓN QUE RECIBA UN NÚMERO Y DEVUELVA SI ES 'PAR' O 'IMPAR'
3.- CRER UNA FUNCIÓN QUE RECIBA UN NOTA NÚMERICA (A, B, C, F) Y RETORNE UN VALOR CORRESPONDIENTE
4.- CREAR UNA FUNCIÓN QUE CALCULE LA EDAD A PARTIR DE LA FECHA DE NACIMIENTO
5.- CREAR UNA FUNCIÓN QUE CALCULE EL PRECIO FINAL DESPUES DE APLICAR UN DESCUENTO DEL 10%
6.- CREAR UNA FUNCIÓNQUE RECIBA NOMBRE Y APELLIDO Y DEVUELVA LAS INICIALES
7.- CREAR UNA FUNCION QUE RECIBA UN NÚMERO DEL 1 AL 12 Y DEVUELVA EL NOMBRE DEL MES CORRESPONDIENTE

*/

-- 1.- CREAR UNA FUNCION QUE CALCULE EL ÁREA DE UN TRIANGULO
CREATE OR REPLACE FUNCTION AREA_TRIANGULO(BASE NUMBER, ALTURA NUMBER)
RETURN NUMBER IS
    RESULTADO NUMBER := 0;
BEGIN 
    RESULTADO := (BASE * ALTURA) / 2;
    RETURN RESULTADO;
END;
/ -- INDICADOR

SELECT AREA_TRIANGULO(10, 5) FROM DUAL;


-- 2.- CREAR UNA FUNCIÓN QUE RECIBA UN NÚMERO Y DEVUELVA SI ES 'PAR' O 'IMPAR'
CREATE OR REPLACE FUNCTION PAR_O_IMPAR(VAL NUMBER)
RETURN NVARCHAR2 IS
    RESPONSE NVARCHAR2(10);
BEGIN
    IF MOD(VAL, 2) = 0 THEN 
        RESPONSE := 'PAR';
    ELSE 
        RESPONSE := 'IMPAR';
    END IF;
    
    RETURN RESPONSE;
END;
/ -- INDICADOR

SELECT PAR_O_IMPAR(2) FROM DUAL;


-- 3.- CRER UNA FUNCIÓN QUE RECIBA UN NOTA NÚMERICA (A, B, C, F) Y RETORNE UN VALOR CORRESPONDIENTE
CREATE OR REPLACE FUNCTION CALIFICACION_POR_NOTA(NOTA NUMBER)
RETURN NVARCHAR2 IS
    RESPONSE NVARCHAR2(1);
BEGIN 
    IF NOTA BETWEEN 0 AND 50 THEN 
        RESPONSE := 'F';
    ELSIF NOTA BETWEEN 51 AND 80 THEN 
        RESPONSE := 'C';
    ELSIF NOTA BETWEEN 81 AND 90 THEN 
        RESPONSE := 'B';
    ELSIF NOTA BETWEEN 91 AND 100 THEN 
        RESPONSE := 'A';
    ELSE
        RESPONSE := 'NOTA NO VALIDA';
    END IF;
    
    RETURN RESPONSE;
END;
/ -- INDICADOR

SELECT CALIFICACION_POR_NOTA(100) FROM DUAL;


-- 4.- CREAR UNA FUNCIÓN QUE CALCULE LA EDAD A PARTIR DE LA FECHA DE NACIMIENTO
CREATE OR REPLACE FUNCTION EDAD_FECHA_NACIMIENTO(FECHA_NAC NVARCHAR2)
RETURN NUMBER IS
    FECHA_ACTUAL NVARCHAR2(30) := TO_CHAR(SYSDATE);
    EDAD NUMBER;
    ANIO_A NUMBER;
    MES_A NUMBER;
    DIA_A NUMBER;
    ANIO_N NUMBER;
    MES_N NUMBER;
    DIA_N NUMBER;
BEGIN 
    DIA_A := TO_NUMBER(SUBSTR(FECHA_ACTUAL, 1, 2));
    MES_A := TO_NUMBER(SUBSTR(FECHA_ACTUAL, 4, 2));
    ANIO_A := TO_NUMBER(SUBSTR(FECHA_ACTUAL, 7, 4));
    DIA_N := TO_NUMBER(SUBSTR(FECHA_NAC, 1, 2));
    MES_N := TO_NUMBER(SUBSTR(FECHA_NAC, 4, 2));
    ANIO_N := TO_NUMBER(SUBSTR(FECHA_NAC, 7, 4));
    
    EDAD := ANIO_A - ANIO_N;
    
    IF (MES_A < MES_N) OR (MES_A = MES_N AND DIA_A < DIA_N) THEN
        EDAD := EDAD - 1;
    END IF;
    
    RETURN NVL(EDAD, 0);
END;
/ -- INDICADOR

SELECT EDAD_FECHA_NACIMIENTO('30-08-2001') FROM DUAL;
SELECT EDAD_FECHA_NACIMIENTO('12-09-2001') FROM DUAL;

-- 5.- CREAR UNA FUNCIÓN QUE CALCULE EL PRECIO FINAL DESPUES DE APLICAR UN DESCUENTO DEL 10%
CREATE OR REPLACE FUNCTION CALCULAR_DESCUENTO(PRECIO NUMBER, DESCUENTO NUMBER)
RETURN NVARCHAR2 IS
    RESULTADO NUMBER;
BEGIN 
    RESULTADO := PRECIO - (PRECIO * (DESCUENTO / 100));
    RETURN RESULTADO;
END;
/ -- INDICADOR

SELECT CALCULAR_DESCUENTO(100, 10) FROM DUAL;


-- 6.- CREAR UNA FUNCIÓN QUE RECIBA NOMBRE Y APELLIDO Y DEVUELVA LAS INICIALES
CREATE OR REPLACE FUNCTION INICIALES_NOMBRE(NOMBRE NVARCHAR2, APELLIDO NVARCHAR2)
RETURN NVARCHAR2 IS
    INICIALES NVARCHAR2(2);
BEGIN 
    INICIALES := UPPER(SUBSTR(NOMBRE, 1, 1) || SUBSTR(APELLIDO, 1, 1));
    RETURN INICIALES;
END;
/ -- INDICADOR

SELECT INICIALES_NOMBRE('cesar', 'martinez') FROM DUAL;


-- 7.- CREAR UNA FUNCION QUE RECIBA UN NÚMERO DEL 1 AL 12 Y DEVUELVA EL NOMBRE DEL MES CORRESPONDIENTE
CREATE OR REPLACE FUNCTION MES_POR_NUMERO(NUMERO_MES NUMBER)
RETURN NVARCHAR2 IS
    NOMBRE_MES NVARCHAR2(15);
BEGIN 
    NOMBRE_MES := 
    CASE NUMERO_MES
        WHEN 1 THEN 'ENERO'
        WHEN 2 THEN 'FEBRERO'
        WHEN 3 THEN 'MARZO'
        WHEN 4 THEN 'ABRIL'
        WHEN 5 THEN 'MAYO'
        WHEN 6 THEN 'JUNIO'
        WHEN 7 THEN 'JULIO'
        WHEN 8 THEN 'AGOSTO'
        WHEN 9 THEN 'SEPTIEMBRE'
        WHEN 10 THEN 'OCTUBRE'
        WHEN 11 THEN 'NOVIEMBRE'
        WHEN 12 THEN 'DICIEMBRE'
        ELSE 'MES NO VALIDO'
    END;
    RETURN NOMBRE_MES;
END;

SELECT MES_POR_NUMERO(8) FROM DUAL;