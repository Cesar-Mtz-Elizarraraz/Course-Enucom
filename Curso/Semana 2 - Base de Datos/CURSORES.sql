/*CURSORES: ES UN MECANISMO QUE USA PL/SQL PARA RECORRER REGISTROS DE UNA CONSULTA SQL DE FORMA FILA POR FILA
CUANDO EJECUTAS UN SELECT PL/SQL QUE DEVUELVE UNA SOLA FILA, PUEDES USAR SELECT INTO
PERO SI EL SELECT DEVUELVE VARIAS FILAS, NECESITAS UN CURSOS PARA RECORRERLAS UNA A UNA
CURSOR IMPILICTO:
    LOS DECLARA EL PROGRAMADOR, SE USA PARA RECORRER RESULTADOS DE UN SELECT QUE DEVUELVE VARIAS FILAS
    TIENE 4 PASOS: DECLARAR -> ABRIR -> RECUPERAR -> CERRAR
*/

SELECT * FROM LIBRO;

CREATE OR REPLACE PROCEDURE PR_DETALLE_LIBRO
IS
    -- PASO 1: DECLARAR EL CURSOR
    CURSOR LIBRO_INFO IS
    SELECT NOMBRE,
    (CASE GENERO
        WHEN 1 THEN 'DRAMA'
        WHEN 2 THEN 'TERROR'
        WHEN 3 THEN 'CIENCIA FICCION'
        WHEN 4 THEN 'NOVELA'
        WHEN 5 THEN 'THRILLER'
        ELSE 'SIN GENERO'
    END) AS GENERO, PRECIO FROM LIBRO;
    
    -- VARIABLES  LOCALES
    LV_NOMBRE LIBRO.NOMBRE%TYPE; -- SIRVE PARA GARANTIZR QUE LA VARIABLE QUE ESTOY ASIGNANDO ES PARA EL NOMBRE DEL LIBRO
    LV_GENERO NVARCHAR2(20);
    LV_PRECIO NUMBER;
BEGIN
    -- PASO 2: ABRIR EL CURSOR
    OPEN LIBRO_INFO;
    -- PASO 3: RECUPERAR EL CURSOR
    LOOP
        -- POR CADA FILA RECORRIDA SE TOMEAN LOS DATOS DEL CURSOR
        FETCH LIBRO_INFO INTO LV_NOMBRE, LV_GENERO, LV_PRECIO;
        -- CONDICION PARA SALIR CUANDO EL CURSOR YA NO TENGA REGISTROS
        EXIT WHEN LIBRO_INFO%NOTFOUND; -- %NOTFOUND, DEVUELVE UN TRUE SI EL ULTIMO FETCH NO OBTUVO RESULTADOS
        DBMS_OUTPUT.PUT_LINE('NOMBRE DEL LIBRO: ' || LV_NOMBRE || ' ES DE GENERO ' || LV_GENERO || ' Y TIENE UN PRECIO DE ' || LV_PRECIO);
    END LOOP;
    -- PASO 4: CERRAR EL CURSOR
    CLOSE LIBRO_INFO;
END;
/ -- INDICADOR

EXECUTE PR_DETALLE_LIBRO;

/* EJERCICIOS
1.- CREAR UN CURSOR QUE RECORRA TODOS LOS EMPLEADOS Y MUESTRE SU NOMBRE, DEPARTAMENTO Y PUESTO
2.- CREAR UN CURSOR QUE MUESTRE LOS ALUMNOS QUE EN SU CARRERA TENGA 'INGENIERIA'
3.- CREAR UN CURSOR QUE RECIBA COMO PARAMETRO EL NOMBRE DEL DEPARTAMENTO Y RETORNE TODOSO LOS EMPLEADOS DE ESE DEPARTAMENTO
*/

SELECT * FROM EMPLEADO;
SELECT * FROM ALUMNO;


-- 1.- CREAR UN CURSOR QUE RECORRA TODOS LOS EMPLEADOS Y MUESTRE SU NOMBRE, DEPARTAMENTO Y PUESTO
CREATE OR REPLACE PROCEDURE PR_DETALLE_EMPLEADO
IS
    CURSOR EMPLEADO_INFO IS
    SELECT NOMBRE, DEPARTAMENTO, PUESTO FROM EMPLEADO;
    
    LV_NOMBRE EMPLEADO.NOMBRE%TYPE;
    LV_DEPARTAMENTO EMPLEADO.DEPARTAMENTO%TYPE;
    LV_PUESTO EMPLEADO.PUESTO%TYPE;

BEGIN
    OPEN EMPLEADO_INFO;
    
    LOOP
        FETCH EMPLEADO_INFO INTO LV_NOMBRE, LV_DEPARTAMENTO, LV_PUESTO;
        EXIT WHEN EMPLEADO_INFO%NOTFOUND; 
        DBMS_OUTPUT.PUT_LINE('NOMBRE DEL EMPLEADO: ' || LV_NOMBRE || ' TRABAJA EN EL DEPARTAMENTO DE ' || LV_DEPARTAMENTO || ' EN EL PUESTO DE ' || LV_PUESTO);
    END LOOP;
END;
/ -- INDICADOR

EXECUTE PR_DETALLE_EMPLEADO;


-- 2.- CREAR UN CURSOR QUE MUESTRE LOS ALUMNOS QUE EN SU CARRERA TENGA 'INGENIERIA'
CREATE OR REPLACE PROCEDURE PR_ALUMNOS_INGENIERIA
IS
    CURSOR ALUMNO_INFO IS
    SELECT * FROM ALUMNO WHERE CARRERA LIKE '%ING%';
    
    LV_ID_ALUMNO NUMBER;
    LV_NOMBRE ALUMNO.NOMBRE%TYPE;
    LV_CARRERA ALUMNO.CARRERA%TYPE;
    LV_SEMESTRE ALUMNO.SEMESTRE%TYPE;

BEGIN
    OPEN ALUMNO_INFO;
    
    LOOP
        FETCH ALUMNO_INFO INTO LV_ID_ALUMNO, LV_NOMBRE, LV_CARRERA, LV_SEMESTRE;
        EXIT WHEN ALUMNO_INFO%NOTFOUND; 
        DBMS_OUTPUT.PUT_LINE('NOMBRE DEL ALUMNO: ' || LV_NOMBRE || ' DE LA CARRERA ' || LV_CARRERA || ' EN EL ' || LV_SEMESTRE || ' SEMESTRE');
    END LOOP;
END;
/ -- INDICADOR

EXECUTE PR_ALUMNOS_INGENIERIA;
    
    
-- 3.- CREAR UN CURSOR QUE RECIBA COMO PARAMETRO EL NOMBRE DEL DEPARTAMENTO Y RETORNE TODOS LOS EMPLEADOS DE ESE DEPARTAMENTO
CREATE OR REPLACE PROCEDURE PR_EMPLEADOS_POR_DEPARTAMENTO(NOM_DEPARTAMENTO NVARCHAR2)
IS
    CURSOR EMPLEADO_INFO IS
    SELECT NOMBRE, APELLIDO, EDAD, DEPARTAMENTO, PUESTO FROM EMPLEADO WHERE LOWER(DEPARTAMENTO) = LOWER(NOM_DEPARTAMENTO);
    
    LV_NOMBRE EMPLEADO.NOMBRE%TYPE;
    LV_APELLIDO EMPLEADO.APELLIDO%TYPE;
    LV_EDAD NUMBER;
    LV_DEPARTAMENTO EMPLEADO.DEPARTAMENTO%TYPE;
    LV_PUESTO EMPLEADO.PUESTO%TYPE;

BEGIN
    OPEN EMPLEADO_INFO;
    
    LOOP
        FETCH EMPLEADO_INFO INTO LV_NOMBRE, LV_APELLIDO, LV_EDAD, LV_DEPARTAMENTO, LV_PUESTO;
        EXIT WHEN EMPLEADO_INFO%NOTFOUND; 
        DBMS_OUTPUT.PUT_LINE('NOMBRE DEL EMPLEADO: ' || LV_NOMBRE || ' ' || LV_APELLIDO || ' DE ' || LV_EDAD || ' AÃ‘OS, TRABAJA EN EL DEPARTAMENTO DE ' || LV_DEPARTAMENTO || ' EN EL PUESTO DE ' || LV_PUESTO);
    END LOOP;
END;

EXECUTE PR_EMPLEADOS_POR_DEPARTAMENTO('SIS');