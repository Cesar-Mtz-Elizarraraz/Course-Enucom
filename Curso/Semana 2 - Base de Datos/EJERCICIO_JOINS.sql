-- PRACTICA PARA USO DE CLAUSULA JOIN
-- TABLA ALUMNO
CREATE TABLE ALUMNO(
    ID_ALUMNO NUMBER,
    NOMBRE NVARCHAR2(100),
    CARRERA NVARCHAR2(100),
    SEMESTRE NUMBER,
    CONSTRAINT ALUMNO_PK PRIMARY KEY(ID_ALUMNO)
);

INSERT INTO ALUMNO VALUES(1, 'ANA PEREZ', 'ING. SISTEMAS', 3);
INSERT INTO ALUMNO VALUES(2, 'CARLOS HERRERA', 'DERECHO', 5);
INSERT INTO ALUMNO VALUES(3, 'FERNANDA GARCIA', 'ARQUITECTURA', 1);
INSERT INTO ALUMNO VALUES(4, 'JUAN GOMEZ', 'ING. CIVIL', 7);
INSERT INTO ALUMNO VALUES(5, 'SOFIA RAMIREZ', 'PSICOLOGIA', 2);
COMMIT;

-- TABLA MATERIA
CREATE TABLE MATERIA(
    ID_MATERIA NUMBER,
    NOMBRE NVARCHAR2(100),
    CREDITOS NUMBER,
    CONSTRAINT MATERIA_PK PRIMARY KEY(ID_MATERIA)
);

INSERT INTO MATERIA VALUES(101, 'BASES DE DATOS', 8);
INSERT INTO MATERIA VALUES(102, 'DERECHO MERCANTIL', 6);
INSERT INTO MATERIA VALUES(103, 'DISENO ARQUITECTONICO', 10);
INSERT INTO MATERIA VALUES(104, 'RESISTENCIA DE MATERIALES', 8);
INSERT INTO MATERIA VALUES(105, 'PSICOLOGIA GENERAL', 7);
INSERT INTO MATERIA VALUES(106, 'PROGRAMACION ORIENTADA A OBJETOS', 9);
COMMIT;

-- TABLA INSCRIPCIÃ“N
CREATE TABLE INSCRIPCION(
    ID_INSCRIPCION NUMBER,
    ALUMNO_ID NUMBER,
    MATERIA_ID NUMBER,
    CALIFICACION NUMBER,
    CONSTRAINT INS_PK PRIMARY KEY(ID_INSCRIPCION),
    CONSTRAINT ALU_FK FOREIGN KEY(ALUMNO_ID) REFERENCES ALUMNO(ID_ALUMNO),
    CONSTRAINT MAT_FK FOREIGN KEY(MATERIA_ID) REFERENCES MATERIA(ID_MATERIA)
);

DROP TABLE INSCRIPCION;

INSERT INTO INSCRIPCION VALUES(1, 1, 101, 95);
INSERT INTO INSCRIPCION VALUES(2, 1, 106, 88);
INSERT INTO INSCRIPCION VALUES(3, 2, 102, 75);
INSERT INTO INSCRIPCION VALUES(4, 3, 103, 80);
INSERT INTO INSCRIPCION VALUES(5, 4, 104, 70);
COMMIT;

/*
    EJERCICIOS
    -- 1.- MUESTRA EL NOMBRE DEL ALUMNO, SU MATERIA INSCRITA Y LA CALIFICACION DE TODOS LOS ALUMNOS QUE TENGAN MATERIAS INSCRITAS
    -- 2.- MOSTRAR TODOS LOS ALUMNOS CON SUS MATERIAS(SI EXISTEN), SI UN ALUMNO NO TIENE MATERIA DEBERA SALIR 'SIN MATERIA'
    -- 3.- MOSTRAR UNICAMENTE LOS ALUMNOS QUE NO TIENEN MATERIA CURSANDO
    -- 4.- MOSTRAR TODAS LAS MATERIAS CON ALUMNOS INSCRITOS. SI ALGUNA MATERIA NO HA SIDO INSCRITA, DEBERA DECIR 'SIN ALUMNOS'
    -- 5.- MOSTRAR TODAS LAS MATERIAS SIN ALUMNOS
    -- 6.- MOSTRAR TODOS LOS ALUMNOS Y TODAS LAS MATERIAS, AUQNUE NO TENGAN COINCIDENCIAS
    -- 7.- MOSTRAR MATERIAS Y ALUMNOS QUE NO TENGAN COINCIDENCIA.
*/

-- 1.- MUESTRA EL NOMBRE DEL ALUMNO, SU MATERIA INSCRITA Y LA CALIFICACION DE TODOS LOS ALUMNOS QUE TENGAN MATERIAS INSCRITAS
SELECT AL.NOMBRE AS NOMBRE_ALUMNO, MA.NOMBRE AS MATERIA_INSCRITA, INS.CALIFICACION
FROM INSCRIPCION INS
INNER JOIN ALUMNO AL ON AL.ID_ALUMNO = INS.ALUMNO_ID
INNER JOIN MATERIA MA ON MA.ID_MATERIA = INS.MATERIA_ID;

-- 2.- MOSTRAR TODOS LOS ALUMNOS CON SUS MATERIAS(SI EXISTEN), SI UN ALUMNO NO TIENE MATERIA DEBERA SALIR 'SIN MATERIA'
SELECT AL.NOMBRE AS NOMBRE_ALUMNO, 
(CASE
    WHEN MA.NOMBRE IS NULL THEN 'SIN MATERIA'
    ELSE TO_CHAR(MA.NOMBRE)
    END) AS MATERIA_INSCRITA
FROM ALUMNO AL
LEFT JOIN INSCRIPCION INS ON AL.ID_ALUMNO = INS.ALUMNO_ID
LEFT JOIN MATERIA MA ON MA.ID_MATERIA = INS.MATERIA_ID;

-- 3.- MOSTRAR UNICAMENTE LOS ALUMNOS QUE NO TIENEN MATERIA CURSANDO
SELECT AL.NOMBRE AS NOMBRE_ALUMNO, AL.CARRERA, AL.SEMESTRE
FROM ALUMNO AL
LEFT JOIN INSCRIPCION INS ON AL.ID_ALUMNO = INS.ALUMNO_ID
LEFT JOIN MATERIA MA ON MA.ID_MATERIA = INS.MATERIA_ID
WHERE MA.ID_MATERIA IS NULL;

-- 4.- MOSTRAR TODAS LAS MATERIAS CON ALUMNOS INSCRITOS. SI ALGUNA MATERIA NO HA SIDO INSCRITA, DEBERA DECIR 'SIN ALUMNOS'
SELECT MA.NOMBRE AS MATERIA_INSCRITA, COUNT(AL.ID_ALUMNO) AS TOTAL_INSCRITOS,
(CASE COUNT(AL.ID_ALUMNO)
    WHEN 0 THEN 'SIN ALUMNOS'
    ELSE 'CON ALUMNOS'
END) AS TIENE_INSCRITOS
FROM MATERIA MA
LEFT JOIN INSCRIPCION INS ON MA.ID_MATERIA = INS.MATERIA_ID
LEFT JOIN ALUMNO AL ON AL.ID_ALUMNO = INS.ALUMNO_ID
GROUP BY MA.NOMBRE;

-- 5.- MOSTRAR TODAS LAS MATERIAS SIN ALUMNOS
SELECT *
FROM (
    SELECT MA.NOMBRE AS MATERIA_INSCRITA, COUNT(AL.ID_ALUMNO) AS TOTAL_INSCRITOS, 
    (CASE COUNT(AL.ID_ALUMNO)
        WHEN 0 THEN 'SIN ALUMNOS'
        ELSE 'CON ALUMNOS'
    END) AS TIENE_INSCRITOS
    FROM MATERIA MA
    LEFT JOIN INSCRIPCION INS ON MA.ID_MATERIA = INS.MATERIA_ID
    LEFT JOIN ALUMNO AL ON AL.ID_ALUMNO = INS.ALUMNO_ID
    GROUP BY MA.NOMBRE
) WHERE TOTAL_INSCRITOS = 0;

-- 6.- MOSTRAR TODOS LOS ALUMNOS Y TODAS LAS MATERIAS, AUQNUE NO TENGAN COINCIDENCIAS
SELECT AL.NOMBRE AS NOMBRE_ALUMNO, AL.CARRERA, AL.SEMESTRE, MA.NOMBRE AS NOMBRE_MATERIA, MA.CREDITOS, INS.CALIFICACION
FROM INSCRIPCION INS
FULL JOIN ALUMNO AL ON AL.ID_ALUMNO = INS.ALUMNO_ID
FULL JOIN MATERIA MA ON MA.ID_MATERIA = INS.MATERIA_ID;

-- 7.- MOSTRAR MATERIAS Y ALUMNOS QUE NO TENGAN COINCIDENCIA.
SELECT AL.NOMBRE AS NOMBRE_ALUMNO, AL.CARRERA, AL.SEMESTRE, MA.NOMBRE AS NOMBRE_MATERIA, MA.CREDITOS, INS.CALIFICACION
FROM INSCRIPCION INS
FULL JOIN ALUMNO AL ON AL.ID_ALUMNO = INS.ALUMNO_ID
FULL JOIN MATERIA MA ON MA.ID_MATERIA = INS.MATERIA_ID
WHERE AL.ID_ALUMNO IS NULL OR MA.ID_MATERIA IS NULL;
